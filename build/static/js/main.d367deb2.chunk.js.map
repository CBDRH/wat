{"version":3,"sources":["CategoryGroup.js","index.js"],"names":["CategoryGroup","props","state","handleHover","bind","handleHoverOut","createButton","e","original_bg","target","style","backgroundColor","this","setState","hovercolor","cat","color","ToggleButton","key","value","category","className","onMouseOver","onMouseOut","toUpperCase","ToggleButtonGroup","vertical","type","name","onChange","handleCatChange","data","buttons","map","React","Component","App","file_name","selectedCat","categoryColor","btndata","bioText","readFiles","onLoadFile","annotate","getSelectedCategory","createCatButtons","queryCatColor","convertToBIO","deleteTag","copyToClipBoard","preventDefault","file","files","reader","FileReader","onload","onloadend","onLoadFileEnd","readAsText","file_content","result","document","getElementById","innerHTML","onmouseup","spans_element","getElementsByClassName","i","length","addEventListener","event","selfnode","currentTarget","parentnode","parentNode","insertBefore","createTextNode","children","removeChild","stopPropagation","text","requestOptions","method","headers","body","JSON","stringify","fetch","then","res","json","plainText","item","token","tag","join","sel","range","selCat","window","getSelection","empty","alert","selectedWords","toString","rangeCount","container","createElement","len","appendChild","getRangeAt","cloneContents","includes","element","borderColor","wordnode","nernode","deleteContents","insertNode","selection","createRange","val","colorForCat","require","jsonQuery","response","hiddenInput","bioContent","split","select","execCommand","Navbar","bg","variant","sticky","Brand","href","alt","src","width","height","Container","fluid","Row","Col","sm","md","lg","xl","id","Button","onClick","ReactDOM","render"],"mappings":"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","file":"static/js/main.d367deb2.chunk.js","sourcesContent":["import React from 'react';\r\nimport ToggleButton from 'react-bootstrap/ToggleButton'\r\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup'\r\n\r\n\r\nclass CategoryGroup extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n    };\r\n\r\n    this.handleHover = this.handleHover.bind(this);\r\n    this.handleHoverOut = this.handleHoverOut.bind(this);\r\n    this.createButton = this.createButton.bind(this);\r\n    // this.queryCatColor = this.queryCatColor.bind(this);\r\n  }\r\n\r\n  handleHover(e) {\r\n    const original_bg = e.target.style.backgroundColor;\r\n    this.setState(state => ({\r\n      hovercolor: original_bg\r\n    }));\r\n    e.target.style.backgroundColor = 'rgba(117, 190, 218, 0.4)';\r\n  }\r\n\r\n  handleHoverOut(e) {\r\n    e.target.style.backgroundColor = this.state.hovercolor;\r\n    this.setState(state => ({\r\n      hovercolor: ''\r\n    }));\r\n  }\r\n\r\n  createButton(cat) {\r\n    let style = {\r\n      'backgroundColor': cat.color,\r\n      'marginTop': '15px'\r\n    };\r\n    return <ToggleButton key={cat.key} value={cat.category} className=\"wat-button\" style={style} onMouseOver={this.handleHover} onMouseOut={this.handleHoverOut}>{cat.category.toUpperCase()}</ToggleButton>\r\n  \r\n  }\r\n\r\n  // queryCatColor(cat) {\r\n  //   let jsonQuery = require('json-query');\r\n  //   let color = jsonQuery('buttons[category='+cat+'].color', {\r\n  //     data: this.props.data\r\n  //   }).value;\r\n  //   return color;\r\n  // }\r\n\r\n  render() {\r\n    \r\n    return (\r\n      <div>\r\n        <ToggleButtonGroup className=\"wat-buttongroup\" vertical type=\"radio\" name=\"categories\" onChange={this.props.handleCatChange}>\r\n          {this.props.data.buttons.map(cat => (this.createButton(cat)))}\r\n        </ToggleButtonGroup>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default CategoryGroup;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Navbar from 'react-bootstrap/Navbar'\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup'\nimport ToggleButton from 'react-bootstrap/ToggleButton'\nimport Button from 'react-bootstrap/Button'\nimport buttons from './categories.json'\nimport CategoryGroup from './CategoryGroup'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // file_text: '',\n      file_name: '',\n      selectedCat: '',\n      categoryColor: '',\n      hovercolor: '',\n      btndata: buttons,\n      bioText: ''\n    };\n\n    //bind the functions\n    this.readFiles = this.readFiles.bind(this);\n    this.onLoadFile = this.onLoadFile.bind(this);\n    this.handleCatChange = this.handleCatChange.bind(this);\n    this.annotate = this.annotate.bind(this);\n    this.getSelectedCategory = this.getSelectedCategory.bind(this);\n    this.createCatButtons = this.createCatButtons.bind(this);\n    this.createButton = this.createButton.bind(this);\n    this.handleHover = this.handleHover.bind(this);\n    this.handleHoverOut = this.handleHoverOut.bind(this);\n    this.queryCatColor = this.queryCatColor.bind(this);\n    this.convertToBIO = this.convertToBIO.bind(this);\n    this.deleteTag = this.deleteTag.bind(this);\n    this.copyToClipBoard = this.copyToClipBoard.bind(this);\n  }\n\n  readFiles(e) {\n    e.preventDefault();\n    let file = e.target.files[0];\n    // console.log(file);\n\n    const reader = new FileReader();\n    reader.onload = this.onLoadFile;\n    reader.onloadend = this.onLoadFileEnd;\n    reader.readAsText(file);\n\n    this.setState(state => ({\n      file_name: file.name\n    }))\n\n\n\n  }\n\n  onLoadFile(e) {\n    let file_content = e.target.result;\n\n    document.getElementById(\"wat-content\").innerHTML = file_content;\n    document.getElementById(\"wat-content\").onmouseup = this.annotate;\n    // call rest api to get bio format\n    this.convertToBIO();\n  }\n\n  // contains duplicated codes here. need to double check with deleteTag and convertToBIO functions\n  onLoadFileEnd(e) {\n    let spans_element = document.getElementsByClassName(\"wat-ent-entity\");\n    for (let i = 0; i < spans_element.length; i++) {\n      spans_element[i].addEventListener(\"mouseup\", function (event) {\n        let selfnode = event.currentTarget;\n        let parentnode = selfnode.parentNode;\n        parentnode.insertBefore(document.createTextNode(selfnode.children[0].innerHTML), selfnode);\n        parentnode.removeChild(selfnode);\n        event.stopPropagation();\n\n        const text = document.getElementById(\"wat-content\").innerHTML;\n        const requestOptions = {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ data: text })\n        };\n        fetch('http://127.0.0.1:5000/converttobio', requestOptions).then(res => res.json())\n        .then(function(data){\n          let plainText = data['result'].map(item => (\n            item.token === '\\n'?'':item.token + ' ' + item.tag\n          ));\n          document.getElementById(\"bio-content\").innerHTML = plainText.join('<br />');\n        });\n        \n\n      });\n    }\n  }\n\n  deleteTag(event) {\n    // console.log('delete Tag')\n    let selfnode = event.currentTarget;\n    let parentnode = selfnode.parentNode;\n    parentnode.insertBefore(document.createTextNode(selfnode.children[0].innerHTML), selfnode);\n    parentnode.removeChild(selfnode);\n    event.stopPropagation();\n\n    // call rest api to get bio format\n    this.convertToBIO();\n  }\n\n  annotate(e) {\n    // console.log('annotate');\n    let selCat = this.getSelectedCategory();\n    if (selCat === '') {\n      window.getSelection().empty();\n      alert('Please select one PHI category.')\n      return;\n    }\n    let sel, range;\n    if (window.getSelection) {\n      sel = window.getSelection();\n      let selectedWords = sel.toString();\n      // console.log(selectedWords);\n      if (selectedWords.length !== 0) {\n        if (sel.rangeCount) {\n          let container = document.createElement(\"div\");\n          for (let i=0, len=sel.rangeCount; i<len; ++i) {\n            container.appendChild(sel.getRangeAt(i).cloneContents());\n          }\n          let sel_html = container.innerHTML;\n          if (sel_html.includes(\"<span class=\")) {\n            window.getSelection().empty();\n            return;\n          }\n\n          range = sel.getRangeAt(0);\n          let element = document.createElement(\"span\");\n          // element.addEventListener(\"mouseup\", function(event){\n          //   let selfnode = event.currentTarget;\n          //   let parentnode = selfnode.parentNode;\n          //   parentnode.insertBefore(document.createTextNode(selfnode.children[0].innerHTML), selfnode);\n          //   parentnode.removeChild(selfnode);\n          //   event.stopPropagation();\n          // });\n          element.onmouseup = this.deleteTag\n          element.className = \"wat-ent-entity\";\n\n          element.style.borderColor = this.state.categoryColor;\n          \n          let wordnode = document.createElement(\"span\");\n          wordnode.className = \"wat-ent-words\";\n          wordnode.style.color = this.state.categoryColor;\n          wordnode.appendChild(document.createTextNode(selectedWords));\n          element.appendChild(wordnode);\n          \n          // ner span\n          var nernode = document.createElement(\"span\");\n          nernode.className = \"wat-ent-ner\";\n          nernode.style.backgroundColor = this.state.categoryColor;\n          nernode.appendChild(document.createTextNode(selCat.toUpperCase()));\n          element.appendChild(nernode);\n\n          // console.log(element);\n\n          range.deleteContents();\n          range.insertNode(element);\n\n          window.getSelection().empty();\n\n          // call rest api to get bio format\n          this.convertToBIO();\n\n        }\n      }\n\n    } else if (document.selection && document.selection.createRange) {\n      window.getSelection().empty();\n      return; \n    }\n  }\n\n  getSelectedCategory() {\n    return this.state.selectedCat;\n  }\n\n  handleCatChange(val) {\n    let colorForCat = this.queryCatColor(val);\n    this.setState(state => ({\n      selectedCat: val,\n      categoryColor: colorForCat\n    }))\n\n  }\n\n  queryCatColor(cat) {\n    let jsonQuery = require('json-query');\n    let color = jsonQuery('buttons[category='+cat+'].color', {\n      data: buttons\n    }).value;\n    return color;\n  }\n\n  createCatButtons(data) {\n    return (\n      <div>\n          <ToggleButtonGroup className=\"wat-buttongroup\" vertical type=\"radio\" name=\"categories\" onChange={this.handleCatChange}>\n              {data.buttons.map(this.createButton)}\n          </ToggleButtonGroup>\n      </div>\n                \n    );\n  }\n\n  createButton(props) {\n    let category = props.category;\n    let style = {\n        'backgroundColor': props.color,\n        'marginTop': '15px'\n    };\n\n    let className = \"wat-button\";\n\n    return <ToggleButton key={props.key} value={category} className={className} style={style} onMouseOver={this.handleHover} onMouseOut={this.handleHoverOut}>{category.toUpperCase()}</ToggleButton>;\n  }\n\n  handleHover(e) {\n    const original_bg = e.target.style.backgroundColor;\n    this.setState(state => ({\n      hovercolor: original_bg\n    }));\n    e.target.style.backgroundColor = 'lightslategrey';\n  }\n\n  handleHoverOut(e) {\n    e.target.style.backgroundColor = this.state.hovercolor;\n    this.setState(state => ({\n      hovercolor: ''\n    }));\n  }\n\n  async convertToBIO() {\n    const text = document.getElementById(\"wat-content\").innerHTML;\n    // console.log('call server');\n    // console.log(text)\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({data: text})\n    };\n    // console.log(requestOptions)\n    const response = await fetch('http://127.0.0.1:5000/converttobio', requestOptions);\n    const data = await response.json();\n    // console.log(data);\n    // this.setState({bioText: data.bioText});\n    // console.log('call end');\n\n    // convert json to plain text with \\n\n    let plainText = data['result'].map(item => (\n      item.token === '\\n'?'':item.token + ' ' + item.tag \n    ));\n\n    // console.log(plainText.join(' '))\n\n    document.getElementById(\"bio-content\").innerHTML = plainText.join('<br />');\n  }\n\n  copyToClipBoard() {\n    var hiddenInput = document.createElement('textarea');\n    var bioContent = document.getElementById(\"bio-content\").innerHTML;\n    // console.log(bioContent)\n    // var brRegex = /<br\\s*[\\/]?>/gi;\n    bioContent = bioContent.split('<br>').join('\\n');\n    // bioContent = bioContent.replace(brRegex, \"\\r\\n\");\n    // console.log(bioContent);\n    hiddenInput.value = bioContent;\n    document.body.appendChild(hiddenInput);\n    hiddenInput.select();\n    document.execCommand('copy');\n    document.body.removeChild(hiddenInput);\n    alert('BIO format data has been copied to the clipboard!')\n    \n  }\n\n\n  render() {\n    return (\n      <div>\n        <Navbar bg=\"success\" variant=\"dark\" sticky=\"top\">\n          <Navbar.Brand href=\"#\">\n            <img\n              alt=\"\"\n              src=\"./logo.svg\"\n              width=\"30\"\n              height=\"30\"\n              className=\"d-inline-block align-top\"\n            />{' '}\n            NER Annotation Tool\n          </Navbar.Brand>\n        </Navbar>\n        <Container fluid className=\"wat-container\">\n          <Row>\n            <Col sm=\"5\" md=\"4\" lg=\"3\" xl=\"2\">\n              <label>1. Select a document: </label>\n              <input type='file' className=\"inputFile\" name=\"Select\" onChange={this.readFiles} />\n              <div>\n                <br />\n                <label>2. Select One PHI Categories: </label>\n                {/* {this.createCatButtons(buttons)} */}\n                <CategoryGroup data={this.state.btndata} handleCatChange={this.handleCatChange}></CategoryGroup>\n              </div>\n              <div>\n                <br />\n                3. Tag the entity words\n                  \n\n              </div>\n            </Col>\n            <Col>\n              <div>{'Document: '}{this.state.file_name}</div>\n              <div id='wat-content' className=\"wat-textContent\">\n              </div>\n            </Col>\n            <Col sm=\"2\" md=\"2\" lg=\"2\">\n              <Row>\n                <Col><div>BIO Format: </div></Col>\n                <Col><div><Button variant=\"link\" className='wat-link' onClick={this.copyToClipBoard}>Copy</Button></div></Col>\n              </Row>\n              \n              <div id=\"bio-content\" className=\"wat-textContent wat-bioText\"></div>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    )\n  }\n}\n\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}